set prefix=/grub

# Locate ESP and Windows installer
search --fs-uuid --set=root --no-floppy A39A-FD54
search --fs-uuid --set=root_windows --no-floppy F79F-FAA1

# Load partition table and file system modules
insmod part_gpt
insmod part_msdos
insmod fat

# Use graphics-mode output
insmod all_video
insmod font
if loadfont "$prefix/fonts/unicode.pf2" ; then
  insmod gfxterm
  set gfxmode=auto
  set gfxpayload=auto
  terminal_input console
  terminal_output gfxterm
fi

# Enable serial console
if serial --unit=0 --speed=115200; then
  terminal_input --append serial
  terminal_output --append serial
fi

# Menu entries

# Arch Linux Installation Medium
# https://archlinux.org/download/
# https://gitlab.archlinux.org/archlinux/mkinitcpio/mkinitcpio-archiso/-/blob/master/docs/README.bootparams
submenu "Arch Linux Installation Medium 2023.01.01..." {
  menuentry "Arch Linux Installation Medium 2023.01.01 (Check, Auto Copy-to-RAM)" {
    echo -e "\n  Arch Linux Installation Medium 2023.01.01 (Check, Auto Copy-to-RAM)\n"

    echo "Loading Kernel..."
    linux /arch/boot/x86_64/vmlinuz-linux archisodevice=/dev/disk/by-uuid/A39A-FD54 archisobasedir=arch checksum=y copytoram=auto $tsc_fix
    echo "Loading Initrd..."
    initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img
    echo "Booting..."
  }

  menuentry "Arch Linux Installation Medium 2023.01.01 (Check, No Copy-to-RAM)" {
    echo -e "\n  Arch Linux Installation Medium 2023.01.01 (Check, No Copy-to-RAM)\n"

    echo "Loading Kernel..."
    linux /arch/boot/x86_64/vmlinuz-linux archisodevice=/dev/disk/by-uuid/A39A-FD54 archisobasedir=arch checksum=y copytoram=n $tsc_fix
    echo "Loading Initrd..."
    initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img
    echo "Booting..."
  }

  menuentry "Arch Linux Installation Medium 2023.01.01 (No Check, Auto Copy-to-RAM)" {
    echo -e "\n  Arch Linux Installation Medium 2023.01.01 (No Check, Copy-to-RAM)\n"

    echo "Loading Kernel..."
    linux /arch/boot/x86_64/vmlinuz-linux archisodevice=/dev/disk/by-uuid/A39A-FD54 archisobasedir=arch checksum=n copytoram=auto $tsc_fix
    echo "Loading Initrd..."
    initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img
    echo "Booting..."
  }

  menuentry "Arch Linux Installation Medium 2023.01.01 (No Check, No Copy-to-RAM)" {
    echo -e "\n  Arch Linux Installation Medium 2023.01.01 (No Check, No Copy-to-RAM)\n"

    echo "Loading Kernel..."
    linux /arch/boot/x86_64/vmlinuz-linux archisodevice=/dev/disk/by-uuid/A39A-FD54 archisobasedir=arch checksum=n copytoram=n $tsc_fix
    echo "Loading Initrd..."
    initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img
    echo "Booting..."
  }
}

# GParted Live
# https://gparted.org/index.php
submenu "GParted Live 1.4.0-6..." {
  menuentry "GParted Live 1.4.0-6 (Default)" {
    echo -e "\n  GParted Live 1.4.0-6 (Default)\n"

    echo "Loading Kernel..."
    linux /gparted-live/vmlinuz boot=live union=overlay username=user config components quiet noswap ip= net.ifnames=0 nosplash live-media-path=/gparted-live
    echo "Loading Initrd..."
    initrd /gparted-live/initrd.img
    echo "Booting..."
  }

  menuentry "GParted Live 1.4.0-6 (Copy To RAM)" {
    echo -e "\n  GParted Live 1.4.0-6 (Copy To RAM)\n"

    echo "Loading Kernel..."
    linux /gparted-live/vmlinuz boot=live union=overlay username=user config components quiet noswap toram=filesystem.squashfs ip= net.ifnames=0 nosplash live-media-path=/gparted-live
    echo "Loading Initrd..."
    initrd /gparted-live/initrd.img
    echo "Booting..."
  }

  menuentry "GParted Live 1.4.0-6 (Failsafe Mode)" {
    echo -e "\n  GParted Live 1.4.0-6 (Failsafe Mode)\n"

    echo "Loading Kernel..."
    linux /gparted-live/vmlinuz boot=live union=overlay username=user config components quiet noswap acpi=off irqpoll noapic noapm nodma nomce nolapic nosmp ip= net.ifnames=0 nomodeset vga=normal nosplash live-media-path=/gparted-live
    echo "Loading Initrd..."
    initrd /gparted-live/initrd.img
    echo "Booting..."
  }
}

# Tails
# https://tails.boum.org/
submenu "Tails 5.8..." {
  menuentry "Tails 5.8 (Default)" {
    echo -e "\n  Tails 5.8 (Default)\n"

    echo "Loading Kernel..."
    linux /tails/vmlinuz boot=live config live-media=removable nopersistence noprompt timezone=Etc/UTC splash noautologin module=Tails slab_nomerge slub_debug=FZ mce=0 vsyscall=none init_on_free=1 mds=full,nosmt page_alloc.shuffle=1 quiet live-media-path=/tails
    echo "Loading Initrd..."
    initrd /tails/initrd.img
    echo "Booting..."
  }

  menuentry "Tails 5.8 (Troubleshooting)" {
    echo -e "\n  Tails 5.8 (Troubleshooting)\n"

    echo "Loading Kernel..."
    linux /tails/vmlinuz boot=live config live-media=removable nopersistence noprompt timezone=Etc/UTC splash noautologin module=Tails slab_nomerge slub_debug=FZ mce=0 vsyscall=none init_on_free=1 mds=full,nosmt page_alloc.shuffle=1 noapic noapm nodma nomce nolapic nomodeset nosmp vga=normal live-media-path=/tails
    echo "Loading Initrd..."
    initrd /tails/initrd.img
    echo "Booting..."
  }
}

# Slax
# https://www.slax.org/
submenu "Slax 15.0.0..." {
  menuentry "Slax 15.0.0 (Fresh Start)" {
    echo -e "\n  Slax 15.0.0 (Fresh Start)\n"

    echo "Loading Kernel..."
    linux /slax/boot/vmlinuz vga=normal oad_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 consoleblank=0 slax.flags=automount $tsc_fix
    echo "Loading Initrd..."
    initrd /slax/boot/initrfs.img
    echo "Booting..."
  }

  menuentry "Slax 15.0.0 (Copy To RAM)" {
    echo -e "\n  Slax 15.0.0 (Copy To RAM)\n"

    echo "Loading Kernel..."
    linux /slax/boot/vmlinuz vga=normal oad_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 consoleblank=0 slax.flags=toram $tsc_fix
    echo "Loading Initrd..."
    initrd /slax/boot/initrfs.img
    echo "Booting..."
  }

  menuentry "Slax 15.0.0 (Persistent Changes)" {
    echo -e "\n  Slax 15.0.0 (Persistent Changes)\n"

    echo "Loading Kernel..."
    linux /slax/boot/vmlinuz vga=normal oad_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 consoleblank=0 slax.flags=perch,automount $tsc_fix
    echo "Loading Initrd..."
    initrd /slax/boot/initrfs.img
    echo "Booting..."
  }
}

# Windows
# https://www.microsoft.com/en-gb/software-download/windows11/
if test -n "$root_windows"; then
  if test "$grub_cpu" == "i386" -a "$grub_platform" == "pc"; then
    menuentry "Windows 11 Version 22H2, Multi-edition, English International (x86 BIOS)" {
      echo -e "\n  Windows 11 Version 22H2, Multi-edition, English International (x86 BIOS)\n"

      echo "Loading Bootmgr..."
      ntldr (${root_windows})/bootmgr
      echo "Booting..."
    }
  fi

  if test "$grub_cpu" == "x86_64" -a "$grub_platform" == "efi"; then
    menuentry "Windows 11 Version 22H2, Multi-edition, English International (x86_64 EFI)" {
      echo -e "\n  Windows 11 Version 22H2, Multi-edition, English International (x86_64 EFI)\n"

      echo "Chainloading Bootmgr..."
      chainloader (${root_windows})/efi/boot/bootx64.efi
      echo "Booting..."
    }
  fi
fi

# MemTest86+
# https://memtest.org/
if test "$grub_cpu" == "i386" -a "$grub_platform" == "pc"; then
  menuentry "MemTest86+ 6.01 (x86 BIOS)" {
    echo -e "\n  MemTest86+ 6.01 (x86 BIOS)\n"

    echo "Chainloading..."
    chainloader /memtest86+/boot/floppy.img
    echo "Booting..."
  }
fi

if test "$grub_cpu" == "x86_64" -a "$grub_platform" == "efi"; then
  menuentry "MemTest86+ 6.01 (x86_64 EFI)" {
    echo -e "\n  MemTest86+ 6.01 (x86_64 EFI)\n"

    echo "Chainloading..."
    chainloader /memtest86+/EFI/BOOT/bootx64.efi
    echo "Booting..."
  }
fi

# MemTest86
# https://www.memtest86.com/
if test "$grub_cpu" == "x86_64" -a "$grub_platform" == "efi"; then
  menuentry "PassMark MemTest86 Free 10.2.1000 (x86_64 EFI)" {
    echo -e "\n  PassMark MemTest86 Free 10.2.1000 (x86_64 EFI)\n"

    echo "Chainloading..."
    chainloader /memtest86/EFI/BOOT/BOOTX64.efi
    echo "Booting..."
  }
fi

if test "$grub_platform" == "efi"; then
  menuentry "[F] Firmware Settings" --hotkey=f {
    echo "Entering Setup..."
    fwsetup
  }
fi

menuentry "[R] Reboot" --hotkey=r {
  echo "Restarting Computer..."
  reboot
}

menuentry "[H] Power Off" --hotkey=h {
  echo "Powering Off..."
  halt
}

# https://docs.kernel.org/admin-guide/kernel-parameters.html
menuentry "[T] Toggle Unstable TSC Workaround" --hotkey=t {
  echo -e "\n  Toggle Unstable TSC Workaround\n"

  if test -z "$tsc_fix"; then
    set tsc_fix="tsc=unstable clocksource=acpi_pm trace_clock=uptime"
    export tsc_fix
    echo "Marking TSC as unstable, selecting acpi_pm as the clocksource and jiffles as time stamps for the trace clock."
  else
    unset tsc_fix
    echo "Unstable TSC Workaround has been disabled."
  fi

  echo -e "\nPress [Enter] to continue..."
  read _unused
}
